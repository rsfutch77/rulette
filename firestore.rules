rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =============================================================================
    // SECURITY FUNCTIONS - Rate Limiting & Validation
    // =============================================================================
    
    // Rate limiting function - prevents spam attacks
    function isRateLimited(userId, collection, maxPerHour) {
      let now = request.time;
      let oneHourAgo = now - duration.value(1, 'h');
      
      return exists(/databases/$(database)/documents/rateLimits/$(userId + '_' + collection)) &&
             get(/databases/$(database)/documents/rateLimits/$(userId + '_' + collection)).data.count >= maxPerHour &&
             get(/databases/$(database)/documents/rateLimits/$(userId + '_' + collection)).data.resetTime > oneHourAgo;
    }
    
    // Daily session creation limit (requirement 6.5.4)
    function isDailySessionLimitExceeded() {
      let today = request.time.toMillis() / 86400000; // Convert to days
      let todayKey = string(int(today));
      
      return exists(/databases/$(database)/documents/dailyLimits/sessions_$(todayKey)) &&
             get(/databases/$(database)/documents/dailyLimits/sessions_$(todayKey)).data.count >= 1000;
    }
    
    // Validate session data structure
    function isValidSessionData(data) {
      return data.keys().hasAll(['sessionId', 'shareableCode', 'hostId', 'players', 'status', 'createdAt']) &&
             data.sessionId is string && data.sessionId.size() > 0 && data.sessionId.size() <= 100 &&
             data.shareableCode is string && data.shareableCode.size() == 6 &&
             data.hostId is string && data.hostId.size() > 0 && data.hostId.size() <= 128 &&
             data.players is list && data.players.size() <= 8 &&
             data.status in ['lobby', 'in-game', 'paused', 'completed'] &&
             data.maxPlayers is number && data.maxPlayers >= 2 && data.maxPlayers <= 8;
    }
    
    // Validate player data structure
    function isValidPlayerData(data) {
      return data.keys().hasAll(['sessionId', 'displayName', 'status']) &&
             data.sessionId is string && data.sessionId.size() > 0 && data.sessionId.size() <= 100 &&
             data.displayName is string && data.displayName.size() > 0 && data.displayName.size() <= 50 &&
             data.status in ['active', 'disconnected', 'left'] &&
             (!('points' in data) || (data.points is number && data.points >= -100 && data.points <= 1000)) &&
             (!('ruleCards' in data) || (data.ruleCards is list && data.ruleCards.size() <= 20));
    }
    
    // Check if user is authenticated (for future auth implementation)
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Check if user is in session
    function isInSession(sessionId) {
      return request.auth != null && 
             exists(/databases/$(database)/documents/gameSessions/$(sessionId)) &&
             request.auth.uid in get(/databases/$(database)/documents/gameSessions/$(sessionId)).data.players;
    }
    
    // Function to get the current date string (YYYY-MM-DD)
    function getTodayDate() {
      return request.time.toDate().getFullYear().toString() + '-' +
             (request.time.toDate().getMonth() + 1).toString().padStart(2, '0') + '-' +
             request.time.toDate().getDate().toString().padStart(2, '0');
    }

    // Function to check if the global killswitch is active
    function isGlobalKillswitchActive() {
      let todayDoc = get(/databases/$(database)/documents/dailyTransactions/$(getTodayDate()));
      return todayDoc.exists() && todayDoc.data.killswitchActive == true;
    }

    // =============================================================================
    // GAME SESSIONS COLLECTION
    // =============================================================================
    
    match /gameSessions/{sessionId} {
      // READ: Allow reading session data for participants only, unless killswitch is active
      allow read: if !isGlobalKillswitchActive() && (
                      isInSession(sessionId) ||
                      (resource.data.shareableCode != null &&
                       request.query.where != null) // Allow lookup by shareable code
                  );
      
      // CREATE: Strict rate limiting and validation, unless killswitch is active
      allow create: if !isGlobalKillswitchActive() &&
                       !isDailySessionLimitExceeded() &&
                       !isRateLimited(request.auth.uid, 'sessions', 10) && // Max 10 sessions per hour per user
                       isValidSessionData(request.resource.data) &&
                       request.auth.uid == request.resource.data.hostId &&
                       request.resource.data.players.size() == 1 &&
                       request.resource.data.players[0] == request.auth.uid;
      
      // UPDATE: Only session participants can update, with validation, unless killswitch is active
      allow update: if !isGlobalKillswitchActive() &&
                       isInSession(sessionId) &&
                       isValidSessionData(request.resource.data) &&
                       // Prevent unauthorized changes to critical fields
                       request.resource.data.sessionId == resource.data.sessionId &&
                       request.resource.data.shareableCode == resource.data.shareableCode &&
                       request.resource.data.hostId == resource.data.hostId &&
                       // Limit update frequency
                       !isRateLimited(request.auth.uid, 'session_updates', 100); // Max 100 updates per hour
      
      // DELETE: Only host can delete, and only in lobby state, unless killswitch is active
      allow delete: if !isGlobalKillswitchActive() &&
                       isOwner(resource.data.hostId) &&
                       resource.data.status == 'lobby';
    }
    
    // =============================================================================
    // PLAYERS COLLECTION
    // =============================================================================
    
    match /players/{playerId} {
      // READ: Players can read their own data and data of players in same session, unless killswitch is active
      allow read: if !isGlobalKillswitchActive() && (
                      isOwner(playerId) ||
                      (exists(/databases/$(database)/documents/players/$(playerId)) &&
                       isInSession(get(/databases/$(database)/documents/players/$(playerId)).data.sessionId))
                  );
      
      // CREATE: Users can only create their own player documents, unless killswitch is active
      allow create: if !isGlobalKillswitchActive() &&
                       isOwner(playerId) &&
                       isValidPlayerData(request.resource.data) &&
                       !isRateLimited(request.auth.uid, 'player_creates', 20); // Max 20 creates per hour
      
      // UPDATE: Users can only update their own player data with validation, unless killswitch is active
      allow update: if !isGlobalKillswitchActive() &&
                       isOwner(playerId) &&
                       isValidPlayerData(request.resource.data) &&
                       // Prevent changing session ID
                       request.resource.data.sessionId == resource.data.sessionId &&
                       !isRateLimited(request.auth.uid, 'player_updates', 200); // Max 200 updates per hour
      
      // DELETE: Users can only delete their own player documents, unless killswitch is active
      allow delete: if !isGlobalKillswitchActive() &&
                       isOwner(playerId);
    }
    
    // =============================================================================
    // DAILY TRANSACTIONS COLLECTION (Global Killswitch)
    // =============================================================================
    match /dailyTransactions/{date} {
      // Allow read access to anyone to check killswitch status
      allow read: if true;
      // Allow write access only to authenticated server-side processes (e.g., Firebase Functions)
      // For now, deny all client writes. A Firebase Function will manage this.
      allow write: if false; // TODO: Implement server-side write rule for Firebase Function
    }

    // =============================================================================
    // RATE LIMITING COLLECTIONS (Internal use only)
    // =============================================================================
    
    match /rateLimits/{limitId} {
      allow read, write: if false; // Internal use only - no direct access
    }
    
    match /dailyLimits/{limitId} {
      allow read, write: if false; // Internal use only - no direct access
    }
    
    // =============================================================================
    // ANALYTICS & MONITORING (Read-only for users)
    // =============================================================================
    
    match /analytics/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Server-side only
    }
    
    // =============================================================================
    // DEFAULT DENY ALL
    // =============================================================================
    
    // Deny all other operations by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}